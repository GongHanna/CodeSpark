1. Git 로컬 저장소 만들기
	- 만들고자 하는 해당 디렉토리에서 마우스 우측 버튼 클릭
	- Git Bash Here 클릭 혹은 터미널에서 CLI 명령어로 해당 폴더 이동
	- 명령어 : $ git init
	- 해당 폴더에 .git 폴더 생성되면 git main 로컬저장소 생성 성공

2-1. 로컬 Git에 사용자 정보 등록
	- github에서 사용하려면 github 계정과 동일하게 설정
	- 명령어 : $ git config --global user.name "사용자이름 입력" 
	- 명령어 : $ git config --global user.email  "사용자이메일 입력" 

2-2. 로컬 Git에 저장된 정보 변경
	- 명령어 : $ git config --global user.name "변경 이름 입력" 
	- 명령어 : $ git config --global user.email "변경 이메일 입력"

2-3. 로컬 Git에 저장된 정보 삭제
	- 명령어 : $ git config --unset --global user.name 
	- 명령어 : $ git config --unset --global user.email﻿

3. 로컬 Git에 저장된 정보 확인
	- 명령어 입력 : $ ﻿git config --list 

================================================================================

1. 로컬에서 작업한 파일을 Git에 등록하고자 할 때
	- 명령어 : ﻿$ git add README.md 혹은 $ git add .
	- git add README.md <- 파일명을 직접 작성하는 경우
	- git add . 혹은 git add * <- 파일이 많은 경우 변경 이력이 있는 파일 전부 stage로 올림
	- git add 디렉토리명 <- 해당 디렉토리 포함 하위 파일 add
	
	- 명령어 : $ ﻿git commit -m "파일 설명"
	- 메시지 내용은 구체적으로 작성해야 하며 메시지를 작성하지 않으면 커밋되지 않음

2. 등록 이력 확인
	- 명령어 : $ ﻿git log  <- 모든 커밋 이력 확인
	- 명령어 : git log --oneline <- 해당 라인 커밋 이력 확인

3. 현재 상태 확인
	- 명령어 : $ ﻿git status

4. add, commit 동시에 (두번째 커밋부터 사용 가능)
	- 명령어 : $ ﻿git commit -am "메시지"

================================================================================

[branch 만들기]
	- 명령어 : $ ﻿git branch dev <- 브랜치 생성
	- 명령어 : $ ﻿git switch dev <- dev 브랜치로 이동
	- 명령어 : $ ﻿git switch -c dev <- 브랜치 바로 생성 후 이동
	- 명령어 : $ ﻿git branch -d dev <- dev 브랜치가 이미 원격에 푸쉬되고 병합 되었을때만 삭제
	- 명령어 : $ ﻿git branch -D dev <- dev 브랜치 강제 삭제
	- 명령어 : $ ﻿git branch --list 혹은 git branch -a 브랜치 리스트 확인
	- 명령어 : $ ﻿git merge dev <- 현재 브랜치에서 dev 브랜치 합침 
	- 명령어 : $ ﻿git branch -m master main <- master 브랜치 이름 main으로 변경


[커밋 되돌리기]
	- 명령어 : $ git reset 123ab21
	- 현재 파일의 변경 사항은 그대로 두고 123ab21 이후의 모든 커밋 내용을 되돌림
	- git reset 123ab21 <- 복구하고자 하는 커밋 아이디 7자리 작성. 기록이 남지 않기 않기 때문에 회귀하기 어려움


[복구 및 이전 커밋으로 이동]
	- 명령어 : $ git revert 123ab21
	- 복구하고자 하는 커밋 아이디 7자리 작성. 커밋 기록이 남아 권장


[파일 및 폴더(디렉토리) 삭제]
	- 깃 사용이 미숙하다면 깃에서 파일이나 디렉토리를 지우지 말고 로컬 디렉토리에서만 삭제 후 커밋하는 방법만 사용
	- 명령어 : $ git rm README.md
	- 명령어 : $ git rm 파일명 <- 파일 삭제
	- 명령어 : $ git rm -r 디렉토리명 <- 디렉토리 삭제. 파일이 남아있는 경우 삭제 되지 않음
	- 명령어 : $ git -rf 디렉토리명 <- 파일이 남아 있어도 강제 삭제
* git으로 지우지 않는 경우에도 사라진 파일들을 추적하지 않도록 한 번 더 git으로 지우는 작업이 필요 *﻿﻿﻿